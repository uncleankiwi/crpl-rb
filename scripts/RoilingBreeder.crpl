$n:5
$interval:15
$cMax:1000
$cAdd:20
$acMax:-1000
$acAdd:-20

#x0 empty +++ 1 frame empty
#retrieving from empty stack in shuffle
#0,0? sticks

#creating n^2 lists of coordinates
once
	#ClearTraceLog
	#HideTraceLog
	#ShowTraceLog

	<-n 2 pow ->nsquare
	0 ->currentPos	
	#currentPos: the counter for position in a subgrid. ranges from 0 to nsquare - 1

	<-n 0 do
		<-n 0 do
			#k: id of the list, ranging from 0 to n^2 - 1
			I <-n mul J add ->k
			CreateList "x" <-k concat ->! 
			CreateList "y" <-k concat ->!

			J ->x
			while <-x MapWidth lt repeat
				I ->y
				while <-y MapHeight lt repeat
					AppendToList("x" <-k concat <-! <-x)
					AppendToList("y" <-k concat <-! <-y)

					<-y <-n add ->y
				endwhile
				<-x <-n add ->x
			endwhile
			
		loop
	loop
	
	#@listLengths
	@shuffleSubgrids

endonce

#=====================meow=======================

if(GetTimer0 eq0)
	@doRoilingBreeder

	<-interval SetTimer0
endif

#=====================meow=======================

:shuffleSubgrids
	GetListCount(<-x0) ->subgridsCount	#number of subgrids on the map
	
	#making sure that all lists are of the same size by filling in with (-1,-1)
	<-nsquare 0 do
		while GetListCount("x" I concat <-!) <-subgridsCount lt repeat
			AppendToList("x" I concat <-! -1)
		endwhile

		while GetListCount("y" I concat <-!) <-subgridsCount lt repeat
			AppendToList("y" I concat <-! -1)
		endwhile
	loop

	#@listLengths

	#shuffle
	<-subgridsCount 0 do
		<-nsquare 0 do
			RandInt(0 <-nsquare) ->randPos
			GetListElement("x" I concat <-! J) ->tempX
			GetListElement("y" I concat <-! J) ->tempY
			SetListElement("x" I concat <-! J GetListElement("x" <-randPos concat <-! J))
			SetListElement("y" I concat <-! J GetListElement("y" <-randPos concat <-! J))
			SetListElement("x" <-randPos concat <-! J <-tempX)
			SetListElement("y" <-randPos concat <-! J <-tempY)
		loop
	loop


:doRoilingBreeder
	#@clearWalls

	GetListCount("x" <-currentPos concat <-!) 0 do
		GetListElement("x" <-currentPos concat <-! I) ->posX
		GetListElement("y" <-currentPos concat <-! I) ->posY
		
		if((<-posX -1 gt) (<-posY -1 gt) or)
			@setCreeper(<-posX <-posY)
			#SetWall(<-posX <-posY 1)
		endif
	loop

	<-currentPos 1 add ->currentPos
	if(<-currentPos <-nsquare gte)
		0 ->currentPos
	endif

:setCreeper
	->pX ->pY	###to reverse?
	GetCreeper(<-pX <-pY) ->oldCreep
	if(<-oldCreep 0 eq)
		#do nothing
	else if(<-oldCreep 0 gt)
		<-oldCreep <-cAdd add <-cMax min ->newCreep
	else
		<-oldCreep <-acAdd add <-acMax max ->newCreep
	endif endif
	SetCreeper(<-pX <-pY <-newCreep)

#debug
:listLengths
	<-nsquare 0 do
		Trace3("list" "x" I concat GetListCount("x" I concat <-!))
	loop

#debug
:clearWalls
	MapWidth 0 do
		MapHeight 0 do
			SetWall(J I 0)
		loop
	loop
